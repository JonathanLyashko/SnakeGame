{"mappings":"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","sources":["<anon>","src/index.ts","pkg/snake_game.js","pkg/snippets/snake_game-027f5cd2d64d2885/www/utils/rnd.js","node_modules/@parcel/runtime-js/lib/runtime-8fcaa778b789850f.js","node_modules/@parcel/runtime-js/lib/helpers/bundle-url.js","src/utils/rnd.js"],"sourcesContent":["(function () {\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global =\n        typeof globalThis !== 'undefined'\n          ? globalThis\n          : typeof self !== 'undefined'\n          ? self\n          : typeof window !== 'undefined'\n          ? window\n          : typeof global !== 'undefined'\n          ? global\n          : {};\n  var parcelRequire = $parcel$global[\"parcelRequire8075\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"ggUaI\", function(module, exports) {\n\nvar $j5jZ2 = parcelRequire(\"j5jZ2\");\n\nvar $e7ruY = parcelRequire(\"e7ruY\");\n(0, $j5jZ2.default)().then((wasm)=>{\n    const CELL_SIZE = window.innerHeight / 25;\n    const WORLD_WIDTH = 10;\n    const snakeSpawnIdx = (0, $e7ruY.rnd)(WORLD_WIDTH * WORLD_WIDTH);\n    const world = (0, $j5jZ2.World).new(WORLD_WIDTH, snakeSpawnIdx);\n    const worldWidth = world.width();\n    const points = document.getElementById(\"points\");\n    const gameStatus = document.getElementById(\"game-status\");\n    const gameControlBtn = document.getElementById(\"game-control-btn\");\n    const canvas = document.getElementById(\"snake-canvas\");\n    const ctx = canvas.getContext(\"2d\");\n    canvas.height = worldWidth * CELL_SIZE;\n    canvas.width = worldWidth * CELL_SIZE;\n    gameControlBtn.addEventListener(\"click\", (_)=>{\n        const status = world.game_status();\n        if (status == undefined) {\n            gameControlBtn.textContent = \"Restart\";\n            world.start_game();\n            play();\n        } else location.reload();\n    });\n    document.addEventListener(\"keydown\", (e)=>{\n        switch(e.code){\n            case \"ArrowUp\":\n                world.change_snake_dir((0, $j5jZ2.Direction).Up);\n                break;\n            case \"ArrowRight\":\n                world.change_snake_dir((0, $j5jZ2.Direction).Right);\n                break;\n            case \"ArrowDown\":\n                world.change_snake_dir((0, $j5jZ2.Direction).Down);\n                break;\n            case \"ArrowLeft\":\n                world.change_snake_dir((0, $j5jZ2.Direction).Left);\n                break;\n        }\n    });\n    function drawWorld() {\n        ctx.beginPath();\n        for(let x = 0; x < worldWidth + 1; x++){\n            ctx.moveTo(CELL_SIZE * x, 0);\n            ctx.lineTo(CELL_SIZE * x, worldWidth * CELL_SIZE);\n        }\n        for(let y = 0; y < worldWidth + 1; y++){\n            ctx.moveTo(0, CELL_SIZE * y);\n            ctx.lineTo(worldWidth * CELL_SIZE, CELL_SIZE * y);\n        }\n        ctx.stroke();\n    }\n    function drawReward() {\n        const idx = world.reward_cell();\n        const col = idx % worldWidth;\n        const row = Math.floor(idx / worldWidth);\n        ctx.beginPath();\n        ctx.fillStyle = \"#FF0000\";\n        ctx.fillRect(col * CELL_SIZE, row * CELL_SIZE, CELL_SIZE, CELL_SIZE);\n        ctx.stroke();\n    }\n    function drawSnake() {\n        const snakeCells = new Uint32Array(wasm.memory.buffer, world.snake_cells(), world.snake_length());\n        snakeCells.filter((cellIdx, i)=>!(i > 0 && cellIdx === snakeCells[0])).forEach((cellIdx, i)=>{\n            const col = cellIdx % worldWidth;\n            const row = Math.floor(cellIdx / worldWidth);\n            ctx.fillStyle = i === 0 ? \"#7878db\" : \"#000000\";\n            ctx.beginPath();\n            ctx.fillRect(col * CELL_SIZE, row * CELL_SIZE, CELL_SIZE, CELL_SIZE);\n        });\n        ctx.stroke();\n    }\n    function drawGameStatus() {\n        gameStatus.textContent = world.game_status_text();\n        points.textContent = world.points().toString();\n    }\n    function paint() {\n        drawWorld();\n        drawSnake();\n        drawReward();\n        drawGameStatus();\n    }\n    function play() {\n        const status = world.game_status();\n        if (status == (0, $j5jZ2.GameStatus).Won || status == (0, $j5jZ2.GameStatus).Lost) {\n            gameControlBtn.textContent = \"Replay\";\n            return;\n        }\n        const fps = 8;\n        setTimeout(()=>{\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\n            world.step();\n            paint();\n            // the method takes a call back to execute before the next repaint\n            requestAnimationFrame(play);\n        }, 1000 / fps);\n    }\n    paint();\n});\n\n});\nparcelRegister(\"j5jZ2\", function(module, exports) {\n\n$parcel$export(module.exports, \"GameStatus\", function () { return $de4dfc3bcac44eee$export$23c7328964450bd2; });\n$parcel$export(module.exports, \"Direction\", function () { return $de4dfc3bcac44eee$export$cacd6541cfeeb6c1; });\n$parcel$export(module.exports, \"World\", function () { return $de4dfc3bcac44eee$export$812cd9544993280d; });\n$parcel$export(module.exports, \"default\", function () { return $de4dfc3bcac44eee$export$2e2bcd8739ae039; });\n\nvar $lJtg6 = parcelRequire(\"lJtg6\");\nlet $de4dfc3bcac44eee$var$wasm;\nconst $de4dfc3bcac44eee$var$cachedTextDecoder = typeof TextDecoder !== \"undefined\" ? new TextDecoder(\"utf-8\", {\n    ignoreBOM: true,\n    fatal: true\n}) : {\n    decode: ()=>{\n        throw Error(\"TextDecoder not available\");\n    }\n};\nif (typeof TextDecoder !== \"undefined\") $de4dfc3bcac44eee$var$cachedTextDecoder.decode();\nlet $de4dfc3bcac44eee$var$cachedUint8Memory0 = null;\nfunction $de4dfc3bcac44eee$var$getUint8Memory0() {\n    if ($de4dfc3bcac44eee$var$cachedUint8Memory0 === null || $de4dfc3bcac44eee$var$cachedUint8Memory0.byteLength === 0) $de4dfc3bcac44eee$var$cachedUint8Memory0 = new Uint8Array($de4dfc3bcac44eee$var$wasm.memory.buffer);\n    return $de4dfc3bcac44eee$var$cachedUint8Memory0;\n}\nfunction $de4dfc3bcac44eee$var$getStringFromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return $de4dfc3bcac44eee$var$cachedTextDecoder.decode($de4dfc3bcac44eee$var$getUint8Memory0().subarray(ptr, ptr + len));\n}\nlet $de4dfc3bcac44eee$var$cachedInt32Memory0 = null;\nfunction $de4dfc3bcac44eee$var$getInt32Memory0() {\n    if ($de4dfc3bcac44eee$var$cachedInt32Memory0 === null || $de4dfc3bcac44eee$var$cachedInt32Memory0.byteLength === 0) $de4dfc3bcac44eee$var$cachedInt32Memory0 = new Int32Array($de4dfc3bcac44eee$var$wasm.memory.buffer);\n    return $de4dfc3bcac44eee$var$cachedInt32Memory0;\n}\nconst $de4dfc3bcac44eee$export$23c7328964450bd2 = Object.freeze({\n    Won: 0,\n    \"0\": \"Won\",\n    Lost: 1,\n    \"1\": \"Lost\",\n    Played: 2,\n    \"2\": \"Played\"\n});\nconst $de4dfc3bcac44eee$export$cacd6541cfeeb6c1 = Object.freeze({\n    Up: 0,\n    \"0\": \"Up\",\n    Right: 1,\n    \"1\": \"Right\",\n    Down: 2,\n    \"2\": \"Down\",\n    Left: 3,\n    \"3\": \"Left\"\n});\nconst $de4dfc3bcac44eee$var$WorldFinalization = typeof FinalizationRegistry === \"undefined\" ? {\n    register: ()=>{},\n    unregister: ()=>{}\n} : new FinalizationRegistry((ptr)=>$de4dfc3bcac44eee$var$wasm.__wbg_world_free(ptr >>> 0));\nclass $de4dfc3bcac44eee$export$812cd9544993280d {\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create($de4dfc3bcac44eee$export$812cd9544993280d.prototype);\n        obj.__wbg_ptr = ptr;\n        $de4dfc3bcac44eee$var$WorldFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        $de4dfc3bcac44eee$var$WorldFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        $de4dfc3bcac44eee$var$wasm.__wbg_world_free(ptr);\n    }\n    /**\n    * @param {number} width\n    * @param {number} snake_idx\n    * @returns {World}\n    */ static new(width, snake_idx) {\n        const ret = $de4dfc3bcac44eee$var$wasm.world_new(width, snake_idx);\n        return $de4dfc3bcac44eee$export$812cd9544993280d.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */ width() {\n        const ret = $de4dfc3bcac44eee$var$wasm.world_width(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {number}\n    */ points() {\n        const ret = $de4dfc3bcac44eee$var$wasm.world_points(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {number | undefined}\n    */ reward_cell() {\n        try {\n            const retptr = $de4dfc3bcac44eee$var$wasm.__wbindgen_add_to_stack_pointer(-16);\n            $de4dfc3bcac44eee$var$wasm.world_reward_cell(retptr, this.__wbg_ptr);\n            var r0 = $de4dfc3bcac44eee$var$getInt32Memory0()[retptr / 4 + 0];\n            var r1 = $de4dfc3bcac44eee$var$getInt32Memory0()[retptr / 4 + 1];\n            return r0 === 0 ? undefined : r1 >>> 0;\n        } finally{\n            $de4dfc3bcac44eee$var$wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {number}\n    */ snake_head_idx() {\n        const ret = $de4dfc3bcac44eee$var$wasm.world_snake_head_idx(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n    */ start_game() {\n        $de4dfc3bcac44eee$var$wasm.world_start_game(this.__wbg_ptr);\n    }\n    /**\n    * @returns {GameStatus | undefined}\n    */ game_status() {\n        const ret = $de4dfc3bcac44eee$var$wasm.world_game_status(this.__wbg_ptr);\n        return ret === 3 ? undefined : ret;\n    }\n    /**\n    * @returns {string}\n    */ game_status_text() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = $de4dfc3bcac44eee$var$wasm.__wbindgen_add_to_stack_pointer(-16);\n            $de4dfc3bcac44eee$var$wasm.world_game_status_text(retptr, this.__wbg_ptr);\n            var r0 = $de4dfc3bcac44eee$var$getInt32Memory0()[retptr / 4 + 0];\n            var r1 = $de4dfc3bcac44eee$var$getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return $de4dfc3bcac44eee$var$getStringFromWasm0(r0, r1);\n        } finally{\n            $de4dfc3bcac44eee$var$wasm.__wbindgen_add_to_stack_pointer(16);\n            $de4dfc3bcac44eee$var$wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * @param {Direction} direction\n    */ change_snake_dir(direction) {\n        $de4dfc3bcac44eee$var$wasm.world_change_snake_dir(this.__wbg_ptr, direction);\n    }\n    /**\n    * @returns {number}\n    */ snake_length() {\n        const ret = $de4dfc3bcac44eee$var$wasm.world_snake_length(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {number}\n    */ snake_cells() {\n        const ret = $de4dfc3bcac44eee$var$wasm.world_snake_cells(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n    */ step() {\n        $de4dfc3bcac44eee$var$wasm.world_step(this.__wbg_ptr);\n    }\n}\nasync function $de4dfc3bcac44eee$var$__wbg_load(module, imports) {\n    if (typeof Response === \"function\" && module instanceof Response) {\n        if (typeof WebAssembly.instantiateStreaming === \"function\") try {\n            return await WebAssembly.instantiateStreaming(module, imports);\n        } catch (e) {\n            if (module.headers.get(\"Content-Type\") != \"application/wasm\") console.warn(\"`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\\n\", e);\n            else throw e;\n        }\n        const bytes = await module.arrayBuffer();\n        return await WebAssembly.instantiate(bytes, imports);\n    } else {\n        const instance = await WebAssembly.instantiate(module, imports);\n        if (instance instanceof WebAssembly.Instance) return {\n            instance: instance,\n            module: module\n        };\n        else return instance;\n    }\n}\nfunction $de4dfc3bcac44eee$var$__wbg_get_imports() {\n    const imports = {};\n    imports.wbg = {};\n    imports.wbg.__wbg_rnd_1f1903d658d226dd = function(arg0) {\n        const ret = (0, $lJtg6.rnd)(arg0 >>> 0);\n        return ret;\n    };\n    imports.wbg.__wbindgen_throw = function(arg0, arg1) {\n        throw new Error($de4dfc3bcac44eee$var$getStringFromWasm0(arg0, arg1));\n    };\n    return imports;\n}\nfunction $de4dfc3bcac44eee$var$__wbg_init_memory(imports, maybe_memory) {}\nfunction $de4dfc3bcac44eee$var$__wbg_finalize_init(instance, module) {\n    $de4dfc3bcac44eee$var$wasm = instance.exports;\n    $de4dfc3bcac44eee$var$__wbg_init.__wbindgen_wasm_module = module;\n    $de4dfc3bcac44eee$var$cachedInt32Memory0 = null;\n    $de4dfc3bcac44eee$var$cachedUint8Memory0 = null;\n    return $de4dfc3bcac44eee$var$wasm;\n}\nfunction $de4dfc3bcac44eee$export$2ec80ee76a9348bf(module) {\n    if ($de4dfc3bcac44eee$var$wasm !== undefined) return $de4dfc3bcac44eee$var$wasm;\n    const imports = $de4dfc3bcac44eee$var$__wbg_get_imports();\n    $de4dfc3bcac44eee$var$__wbg_init_memory(imports);\n    if (!(module instanceof WebAssembly.Module)) module = new WebAssembly.Module(module);\n    const instance = new WebAssembly.Instance(module, imports);\n    return $de4dfc3bcac44eee$var$__wbg_finalize_init(instance, module);\n}\n\nasync function $de4dfc3bcac44eee$var$__wbg_init(input) {\n    if ($de4dfc3bcac44eee$var$wasm !== undefined) return $de4dfc3bcac44eee$var$wasm;\n    if (typeof input === \"undefined\") input = new URL((parcelRequire(\"3aMDe\")));\n    const imports = $de4dfc3bcac44eee$var$__wbg_get_imports();\n    if (typeof input === \"string\" || typeof Request === \"function\" && input instanceof Request || typeof URL === \"function\" && input instanceof URL) input = fetch(input);\n    $de4dfc3bcac44eee$var$__wbg_init_memory(imports);\n    const { instance: instance, module: module } = await $de4dfc3bcac44eee$var$__wbg_load(await input, imports);\n    return $de4dfc3bcac44eee$var$__wbg_finalize_init(instance, module);\n}\nvar $de4dfc3bcac44eee$export$2e2bcd8739ae039 = $de4dfc3bcac44eee$var$__wbg_init;\n\n});\nparcelRegister(\"lJtg6\", function(module, exports) {\n\n$parcel$export(module.exports, \"rnd\", function () { return $fd247f2119908514$export$e87bfa2a4c6bccb0; });\nfunction $fd247f2119908514$export$e87bfa2a4c6bccb0(max) {\n    return Math.floor(Math.random() * max);\n}\n\n});\n\nparcelRegister(\"3aMDe\", function(module, exports) {\n\nmodule.exports = (parcelRequire(\"5waPY\")).getBundleURL(\"k3duZ\") + \"snake_game_bg.47c2c59e.wasm\";\n\n});\nparcelRegister(\"5waPY\", function(module, exports) {\n\n$parcel$export(module.exports, \"getBundleURL\", function () { return $404858fdeb70fa97$export$bdfd709ae4826697; }, function (v) { return $404858fdeb70fa97$export$bdfd709ae4826697 = v; });\nvar $404858fdeb70fa97$export$bdfd709ae4826697;\nvar $404858fdeb70fa97$export$c9e73fbda7da57b6;\nvar $404858fdeb70fa97$export$5a759dc7a1cfb72a;\n\"use strict\";\nvar $404858fdeb70fa97$var$bundleURL = {};\nfunction $404858fdeb70fa97$var$getBundleURLCached(id) {\n    var value = $404858fdeb70fa97$var$bundleURL[id];\n    if (!value) {\n        value = $404858fdeb70fa97$var$getBundleURL();\n        $404858fdeb70fa97$var$bundleURL[id] = value;\n    }\n    return value;\n}\nfunction $404858fdeb70fa97$var$getBundleURL() {\n    try {\n        throw new Error();\n    } catch (err) {\n        var matches = (\"\" + err.stack).match(/(https?|file|ftp|(chrome|moz|safari-web)-extension):\\/\\/[^)\\n]+/g);\n        if (matches) // The first two stack frames will be this function and getBundleURLCached.\n        // Use the 3rd one, which will be a runtime in the original bundle.\n        return $404858fdeb70fa97$var$getBaseURL(matches[2]);\n    }\n    return \"/\";\n}\nfunction $404858fdeb70fa97$var$getBaseURL(url) {\n    return (\"\" + url).replace(/^((?:https?|file|ftp|(chrome|moz|safari-web)-extension):\\/\\/.+)\\/[^/]+$/, \"$1\") + \"/\";\n}\n// TODO: Replace uses with `new URL(url).origin` when ie11 is no longer supported.\nfunction $404858fdeb70fa97$var$getOrigin(url) {\n    var matches = (\"\" + url).match(/(https?|file|ftp|(chrome|moz|safari-web)-extension):\\/\\/[^/]+/);\n    if (!matches) throw new Error(\"Origin not found\");\n    return matches[0];\n}\n$404858fdeb70fa97$export$bdfd709ae4826697 = $404858fdeb70fa97$var$getBundleURLCached;\n$404858fdeb70fa97$export$c9e73fbda7da57b6 = $404858fdeb70fa97$var$getBaseURL;\n$404858fdeb70fa97$export$5a759dc7a1cfb72a = $404858fdeb70fa97$var$getOrigin;\n\n});\n\n\n\nparcelRegister(\"e7ruY\", function(module, exports) {\n\n$parcel$export(module.exports, \"rnd\", function () { return $a4770cc2bad56b2c$export$e87bfa2a4c6bccb0; });\nfunction $a4770cc2bad56b2c$export$e87bfa2a4c6bccb0(max) {\n    return Math.floor(Math.random() * max);\n}\n\n});\n\n\n})();\n//# sourceMappingURL=snake_deploy.9b729788.js.map\n","\r\nimport init, { World, Direction, GameStatus } from \"snake_game\";\r\nimport { rnd } from \"./utils/rnd\";\r\n\r\ninit().then(wasm => {\r\n    const CELL_SIZE = window.innerHeight / 25;\r\n    const WORLD_WIDTH = 10;\r\n\r\n    const snakeSpawnIdx = rnd(WORLD_WIDTH * WORLD_WIDTH);\r\n\r\n    const world = World.new(WORLD_WIDTH, snakeSpawnIdx);\r\n    const worldWidth = world.width();\r\n\r\n    const points = document.getElementById(\"points\");\r\n    const gameStatus = document.getElementById(\"game-status\");\r\n    const gameControlBtn = document.getElementById(\"game-control-btn\");\r\n    const canvas = <HTMLCanvasElement> document.getElementById(\"snake-canvas\");\r\n\r\n    const ctx = canvas.getContext(\"2d\");\r\n\r\n    canvas.height = worldWidth * CELL_SIZE;\r\n    canvas.width = worldWidth * CELL_SIZE;\r\n\r\n    gameControlBtn.addEventListener(\"click\", _ => {\r\n        const status = world.game_status();\r\n\r\n        if (status == undefined) {\r\n            gameControlBtn.textContent = \"Restart\"\r\n            world.start_game();\r\n            play();\r\n        } else {\r\n            location.reload();\r\n        }\r\n    })\r\n\r\n    document.addEventListener(\"keydown\", e => {\r\n        switch(e.code) {\r\n            case \"ArrowUp\":\r\n                world.change_snake_dir(Direction.Up);\r\n                break;\r\n            case \"ArrowRight\":\r\n                world.change_snake_dir(Direction.Right);\r\n                break;\r\n            case \"ArrowDown\":\r\n                world.change_snake_dir(Direction.Down);\r\n                break;\r\n            case \"ArrowLeft\":\r\n                world.change_snake_dir(Direction.Left);\r\n                break;\r\n        }\r\n    });\r\n\r\n    function drawWorld() {\r\n        ctx.beginPath();\r\n\r\n        for (let x = 0; x < worldWidth + 1; x++) {\r\n            ctx.moveTo(CELL_SIZE * x, 0);\r\n            ctx.lineTo(CELL_SIZE * x, worldWidth * CELL_SIZE)\r\n        }\r\n\r\n        for (let y = 0; y < worldWidth + 1; y++) {\r\n            ctx.moveTo(0, CELL_SIZE * y);\r\n            ctx.lineTo(worldWidth * CELL_SIZE, CELL_SIZE * y)\r\n        }\r\n\r\n        ctx.stroke(); \r\n    }\r\n\r\n    function drawReward() {\r\n\r\n        const idx = world.reward_cell();\r\n        const col = idx % worldWidth;\r\n        const row = Math.floor(idx / worldWidth);\r\n\r\n        ctx.beginPath(); \r\n        ctx.fillStyle = \"#FF0000\";\r\n        ctx.fillRect(\r\n            col * CELL_SIZE, \r\n            row * CELL_SIZE, \r\n            CELL_SIZE, \r\n            CELL_SIZE\r\n        );\r\n        ctx.stroke();\r\n    }\r\n\r\n    function drawSnake() {\r\n        \r\n        const snakeCells = new Uint32Array(\r\n            wasm.memory.buffer,\r\n            world.snake_cells(),\r\n            world.snake_length()\r\n        )\r\n\r\n        snakeCells\r\n            .filter((cellIdx, i) => !(i > 0 && cellIdx === snakeCells[0]))\r\n            .forEach((cellIdx, i) => {\r\n            const col = cellIdx % worldWidth;\r\n            const row = Math.floor(cellIdx / worldWidth);\r\n\r\n            ctx.fillStyle = i === 0 ? \"#7878db\" : \"#000000\";\r\n    \r\n            ctx.beginPath();\r\n            ctx.fillRect(\r\n                col * CELL_SIZE, \r\n                row * CELL_SIZE, \r\n                CELL_SIZE, \r\n                CELL_SIZE\r\n            );\r\n        })\r\n\r\n        ctx.stroke();\r\n    }\r\n\r\n    function drawGameStatus() {\r\n        gameStatus.textContent = world.game_status_text();\r\n        points.textContent = world.points().toString();\r\n    }\r\n\r\n    function paint() {\r\n        drawWorld();\r\n        drawSnake();\r\n        drawReward();\r\n        drawGameStatus();\r\n    }\r\n\r\n    function play() {\r\n        const status = world.game_status();\r\n\r\n        if (status == GameStatus.Won || status == GameStatus.Lost) {\r\n            gameControlBtn.textContent = \"Replay\";\r\n            return;\r\n        }\r\n\r\n        const fps = 8;\r\n        setTimeout(() => {\r\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n            world.step();\r\n            paint();\r\n            // the method takes a call back to execute before the next repaint\r\n            requestAnimationFrame(play);\r\n        }, 1000 / fps)\r\n    }\r\n\r\n    paint();\r\n})","import { rnd } from './snippets/snake_game-027f5cd2d64d2885/www/utils/rnd.js';\n\nlet wasm;\n\nconst cachedTextDecoder = (typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-8', { ignoreBOM: true, fatal: true }) : { decode: () => { throw Error('TextDecoder not available') } } );\n\nif (typeof TextDecoder !== 'undefined') { cachedTextDecoder.decode(); };\n\nlet cachedUint8Memory0 = null;\n\nfunction getUint8Memory0() {\n    if (cachedUint8Memory0 === null || cachedUint8Memory0.byteLength === 0) {\n        cachedUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachedUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n\nlet cachedInt32Memory0 = null;\n\nfunction getInt32Memory0() {\n    if (cachedInt32Memory0 === null || cachedInt32Memory0.byteLength === 0) {\n        cachedInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachedInt32Memory0;\n}\n/**\n*/\nexport const GameStatus = Object.freeze({ Won:0,\"0\":\"Won\",Lost:1,\"1\":\"Lost\",Played:2,\"2\":\"Played\", });\n/**\n*/\nexport const Direction = Object.freeze({ Up:0,\"0\":\"Up\",Right:1,\"1\":\"Right\",Down:2,\"2\":\"Down\",Left:3,\"3\":\"Left\", });\n\nconst WorldFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_world_free(ptr >>> 0));\n/**\n*/\nexport class World {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(World.prototype);\n        obj.__wbg_ptr = ptr;\n        WorldFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        WorldFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_world_free(ptr);\n    }\n    /**\n    * @param {number} width\n    * @param {number} snake_idx\n    * @returns {World}\n    */\n    static new(width, snake_idx) {\n        const ret = wasm.world_new(width, snake_idx);\n        return World.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    width() {\n        const ret = wasm.world_width(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {number}\n    */\n    points() {\n        const ret = wasm.world_points(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {number | undefined}\n    */\n    reward_cell() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.world_reward_cell(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return r0 === 0 ? undefined : r1 >>> 0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {number}\n    */\n    snake_head_idx() {\n        const ret = wasm.world_snake_head_idx(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n    */\n    start_game() {\n        wasm.world_start_game(this.__wbg_ptr);\n    }\n    /**\n    * @returns {GameStatus | undefined}\n    */\n    game_status() {\n        const ret = wasm.world_game_status(this.__wbg_ptr);\n        return ret === 3 ? undefined : ret;\n    }\n    /**\n    * @returns {string}\n    */\n    game_status_text() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.world_game_status_text(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * @param {Direction} direction\n    */\n    change_snake_dir(direction) {\n        wasm.world_change_snake_dir(this.__wbg_ptr, direction);\n    }\n    /**\n    * @returns {number}\n    */\n    snake_length() {\n        const ret = wasm.world_snake_length(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {number}\n    */\n    snake_cells() {\n        const ret = wasm.world_snake_cells(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n    */\n    step() {\n        wasm.world_step(this.__wbg_ptr);\n    }\n}\n\nasync function __wbg_load(module, imports) {\n    if (typeof Response === 'function' && module instanceof Response) {\n        if (typeof WebAssembly.instantiateStreaming === 'function') {\n            try {\n                return await WebAssembly.instantiateStreaming(module, imports);\n\n            } catch (e) {\n                if (module.headers.get('Content-Type') != 'application/wasm') {\n                    console.warn(\"`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\\n\", e);\n\n                } else {\n                    throw e;\n                }\n            }\n        }\n\n        const bytes = await module.arrayBuffer();\n        return await WebAssembly.instantiate(bytes, imports);\n\n    } else {\n        const instance = await WebAssembly.instantiate(module, imports);\n\n        if (instance instanceof WebAssembly.Instance) {\n            return { instance, module };\n\n        } else {\n            return instance;\n        }\n    }\n}\n\nfunction __wbg_get_imports() {\n    const imports = {};\n    imports.wbg = {};\n    imports.wbg.__wbg_rnd_1f1903d658d226dd = function(arg0) {\n        const ret = rnd(arg0 >>> 0);\n        return ret;\n    };\n    imports.wbg.__wbindgen_throw = function(arg0, arg1) {\n        throw new Error(getStringFromWasm0(arg0, arg1));\n    };\n\n    return imports;\n}\n\nfunction __wbg_init_memory(imports, maybe_memory) {\n\n}\n\nfunction __wbg_finalize_init(instance, module) {\n    wasm = instance.exports;\n    __wbg_init.__wbindgen_wasm_module = module;\n    cachedInt32Memory0 = null;\n    cachedUint8Memory0 = null;\n\n\n    return wasm;\n}\n\nfunction initSync(module) {\n    if (wasm !== undefined) return wasm;\n\n    const imports = __wbg_get_imports();\n\n    __wbg_init_memory(imports);\n\n    if (!(module instanceof WebAssembly.Module)) {\n        module = new WebAssembly.Module(module);\n    }\n\n    const instance = new WebAssembly.Instance(module, imports);\n\n    return __wbg_finalize_init(instance, module);\n}\n\nasync function __wbg_init(input) {\n    if (wasm !== undefined) return wasm;\n\n    if (typeof input === 'undefined') {\n        input = new URL('snake_game_bg.wasm', import.meta.url);\n    }\n    const imports = __wbg_get_imports();\n\n    if (typeof input === 'string' || (typeof Request === 'function' && input instanceof Request) || (typeof URL === 'function' && input instanceof URL)) {\n        input = fetch(input);\n    }\n\n    __wbg_init_memory(imports);\n\n    const { instance, module } = await __wbg_load(await input, imports);\n\n    return __wbg_finalize_init(instance, module);\n}\n\nexport { initSync }\nexport default __wbg_init;\n","\r\n\r\nexport function rnd(max) {\r\n    return Math.floor(Math.random() * max);\r\n}","module.exports = require('./helpers/bundle-url').getBundleURL('k3duZ') + \"snake_game_bg.47c2c59e.wasm\";","\"use strict\";\n\nvar bundleURL = {};\nfunction getBundleURLCached(id) {\n  var value = bundleURL[id];\n  if (!value) {\n    value = getBundleURL();\n    bundleURL[id] = value;\n  }\n  return value;\n}\nfunction getBundleURL() {\n  try {\n    throw new Error();\n  } catch (err) {\n    var matches = ('' + err.stack).match(/(https?|file|ftp|(chrome|moz|safari-web)-extension):\\/\\/[^)\\n]+/g);\n    if (matches) {\n      // The first two stack frames will be this function and getBundleURLCached.\n      // Use the 3rd one, which will be a runtime in the original bundle.\n      return getBaseURL(matches[2]);\n    }\n  }\n  return '/';\n}\nfunction getBaseURL(url) {\n  return ('' + url).replace(/^((?:https?|file|ftp|(chrome|moz|safari-web)-extension):\\/\\/.+)\\/[^/]+$/, '$1') + '/';\n}\n\n// TODO: Replace uses with `new URL(url).origin` when ie11 is no longer supported.\nfunction getOrigin(url) {\n  var matches = ('' + url).match(/(https?|file|ftp|(chrome|moz|safari-web)-extension):\\/\\/[^/]+/);\n  if (!matches) {\n    throw new Error('Origin not found');\n  }\n  return matches[0];\n}\nexports.getBundleURL = getBundleURLCached;\nexports.getBaseURL = getBaseURL;\nexports.getOrigin = getOrigin;","\r\n\r\nexport function rnd(max) {\r\n    return Math.floor(Math.random() * max);\r\n}"],"names":["$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","parcelRequire","$parcel$global","globalThis","self","window","global","parcelRegister","register","module","exports","$j5jZ2","$e7ruY","default","then","wasm","CELL_SIZE","innerHeight","snakeSpawnIdx","rnd","WORLD_WIDTH","world","World","new","worldWidth","width","points","document","getElementById","gameStatus","gameControlBtn","canvas","ctx","getContext","paint","drawWorld","beginPath","x","moveTo","lineTo","y","stroke","drawSnake","snakeCells","Uint32Array","memory","buffer","snake_cells","snake_length","filter","cellIdx","i","forEach","fillStyle","fillRect","col","row","Math","floor","drawReward","idx","reward_cell","textContent","game_status_text","toString","height","addEventListener","_","status","undefined","game_status","start_game","play","GameStatus","Won","Lost","setTimeout","clearRect","step","requestAnimationFrame","location","reload","code","change_snake_dir","Direction","Up","Right","Down","Left","$de4dfc3bcac44eee$var$wasm","$de4dfc3bcac44eee$export$23c7328964450bd2","$de4dfc3bcac44eee$export$cacd6541cfeeb6c1","$de4dfc3bcac44eee$export$812cd9544993280d","$de4dfc3bcac44eee$export$2e2bcd8739ae039","$lJtg6","$de4dfc3bcac44eee$var$cachedTextDecoder","TextDecoder","ignoreBOM","fatal","decode","Error","$de4dfc3bcac44eee$var$cachedUint8Memory0","$de4dfc3bcac44eee$var$getStringFromWasm0","ptr","len","$de4dfc3bcac44eee$var$getUint8Memory0","byteLength","Uint8Array","subarray","$de4dfc3bcac44eee$var$cachedInt32Memory0","$de4dfc3bcac44eee$var$getInt32Memory0","Int32Array","freeze","Played","$de4dfc3bcac44eee$var$WorldFinalization","FinalizationRegistry","unregister","__wbg_world_free","__wrap","obj","create","prototype","__wbg_ptr","__destroy_into_raw","free","snake_idx","ret","world_new","world_width","world_points","retptr","__wbindgen_add_to_stack_pointer","world_reward_cell","r0","r1","snake_head_idx","world_snake_head_idx","world_start_game","world_game_status","deferred1_0","deferred1_1","world_game_status_text","__wbindgen_free","direction","world_change_snake_dir","world_snake_length","world_snake_cells","world_step","$de4dfc3bcac44eee$var$__wbg_load","imports","Response","WebAssembly","instantiateStreaming","headers","console","warn","bytes","arrayBuffer","instantiate","instance","Instance","$de4dfc3bcac44eee$var$__wbg_init","input","URL","$de4dfc3bcac44eee$var$__wbg_get_imports","wbg","__wbg_rnd_1f1903d658d226dd","arg0","__wbindgen_throw","arg1","Request","fetch","__wbindgen_wasm_module","$fd247f2119908514$export$e87bfa2a4c6bccb0","max","random","getBundleURL","$404858fdeb70fa97$export$bdfd709ae4826697","$404858fdeb70fa97$var$bundleURL","id","value","$404858fdeb70fa97$var$getBundleURL","err","matches","stack","match","replace","$a4770cc2bad56b2c$export$e87bfa2a4c6bccb0"],"version":3,"file":"snake_deploy.9b729788.js.map"}